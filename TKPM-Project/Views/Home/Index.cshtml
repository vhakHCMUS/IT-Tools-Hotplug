@using TKPM_Project.Models.Tools
@model List<Tool>
@using System.Linq

@{
    ViewData["Title"] = "Home Page";
}

<style>
    :root {
        --primary-pink: #ffb6c1;
        --secondary-pink: #f8c8dc;
        --accent-rose: #ff91a4;
        --background-light: #fff0f5;
        --text-dark: #6a0572;
        --border-soft: #ffdde1;
        --gold-gradient: linear-gradient(135deg, #ffd700, #ffec8b);
    }

    body {
        background-color: var(--background-light);
        color: var(--text-dark);
    }

    .card {
        background-color: #ffffff;
        border: 2px solid var(--border-soft);
        border-radius: 16px;
        box-shadow: 2px 4px 10px rgba(255, 182, 193, 0.2);
        transition: transform 0.2s;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(255, 182, 193, 0.3);
        }

    .premium-card {
        background: var(--gold-gradient) !important;
        color: #8b6508 !important;
        border: 3px solid #ffcc00;
        animation: glow 1.5s infinite alternate;
    }

    @@keyframes glow {
        0% {
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        100% {
            box-shadow: 0 0 20px rgba(255, 215, 0, 1);
        }
    }

    .bi-heart {
        cursor: pointer;
        font-size: 1.2rem;
    }

        .bi-heart.liked {
            color: #ff4d4f !important; /* Red when liked */
        }

        .bi-heart:not(.liked) {
            color: black !important; /* White when not liked */
        }

        .bi-heart:hover {
            color: #ff4d4f !important;
        }
</style>

<div class="text-center">
    <h1 class="display-4">Welcome to IT Tools</h1>
    <p>Upload a .dll file to add a new tool!</p>

    @if (User.Identity.IsAuthenticated)
    {
        <div class="mb-3">
            <span>Welcome, @User.Identity.Name!</span>
            <form id="logoutForm">
                <button type="button" class="btn btn-danger btn-sm" onclick="logout()">Logout</button>
            </form>
        </div>
    }
    else
    {
        <div class="mb-3">
            <a href="/Account/Login" class="btn btn-outline-primary me-2">Login</a>
            <a href="/Account/Register" class="btn btn-primary">Sign Up</a>
        </div>
    }

    @* Commented out Import Tool section
    <form asp-action="ImportTool" method="post" enctype="multipart/form-data" class="mb-4">
        <input type="file" name="dllFile" accept=".dll" class="form-control d-inline-block w-auto" />
        <button type="submit" class="btn btn-primary">Import Tool</button>
    </form>
    *@

    <h2>Available Tools</h2>
    @if (Model != null && Model.Any())
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var tool in Model)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm @(tool.IsPremium ? "premium-card" : "")">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0">@tool.Name</h5>
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <i class="bi bi-heart" data-tool-id="@tool.Id" onclick="toggleLike(@tool.Id, this)"></i>
                                }
                                else
                                {
                                    <i class="bi bi-heart" style="color: #ffffff;"></i>
                                }
                            </div>
                            <p class="card-text text-muted small mt-2">@tool.Description</p>
                            <p class="card-text text-muted small">
                                <strong>Category:</strong> @tool.Category<br />
                                <strong>Premium:</strong> @(tool.IsPremium ? "Yes" : "No")
                            </p>
                            <div class="d-flex justify-content-between">
                                <a asp-controller="Tool" asp-action="Detail" asp-route-toolName="@tool.Name" class="btn btn-primary btn-sm">View Details</a>
                                <form asp-action="DeleteTool" method="post" style="display:inline;">
                                    <input type="hidden" name="toolName" value="@tool.Name" />
                                    <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete @tool.Name?');">Delete</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No tools available yet.</p>
    }
</div>

@if (User.Identity.IsAuthenticated)
{
    <script>
        // Load initial like states when the page loads
        document.addEventListener('DOMContentLoaded', async () => {
            const hearts = document.querySelectorAll('.bi-heart');
            for (let heart of hearts) {
                const toolId = heart.getAttribute('data-tool-id');
                await checkLikeStatus(toolId, heart);
            }
        });

        // Check if a tool is liked
        async function checkLikeStatus(toolId, heartElement) {
            try {
                const response = await fetch(`/api/userlikedtools/isliked?toolId=${toolId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await response.json();
                if (response.ok && data.isLiked) {
                    heartElement.classList.add('liked');
                } else {
                    heartElement.classList.remove('liked');
                }
            } catch (error) {
                console.error('Error checking like status:', error);
            }
        }

        // Toggle like/unlike
        async function toggleLike(toolId, heartElement) {
            const isLiked = heartElement.classList.contains('liked');
            const url = isLiked ? `/api/userlikedtools/unlike?toolId=${toolId}` : `/api/userlikedtools/like?toolId=${toolId}`;
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (response.ok) {
                    heartElement.classList.toggle('liked');
                    const message = await response.text();
                    alert(message);
                } else {
                    const error = await response.text();
                    alert(error);
                }
            } catch (error) {
                console.error('Error toggling like:', error);
                alert('An error occurred while toggling like.');
            }
        }

        // Logout function
        async function logout() {
            const response = await fetch('/api/auth/logout', { method: 'POST' });
            if (response.ok) {
                alert("Logged out successfully");
                window.location.href = "/";
            } else {
                alert("Logout failed");
            }
        }
    </script>
}