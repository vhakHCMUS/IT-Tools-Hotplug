@using TKPM_Project.Models.Tools
@model List<Tool>

@{
    ViewData["Title"] = "Tool Management";
}

<h1>Tool Management</h1>

<!-- Import New Tool Section -->
<h3>Import New Tool</h3>
<form asp-action="ImportTool" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label for="dllFile">Select .dll file:</label>
        <input type="file" name="dllFile" class="form-control" accept=".dll" />
        <small class="form-text text-muted">Upload a .dll file to add a new tool.</small>
    </div>
    <button type="submit" class="btn btn-primary">Import Tool</button>
</form>

<!-- Search/Filter Section -->
<h3>Existing Tools</h3>
<div class="mb-3">
    <form method="get" asp-action="Index" class="form-inline">
        <div class="form-group me-2">
            <label for="searchTerm" class="me-2">Search by Name:</label>
            <input type="text" name="searchTerm" id="searchTerm" class="form-control" placeholder="Enter tool name" value="@ViewBag.SearchTerm" />
        </div>
        <div class="form-group me-2">
            <label for="categoryFilter" class="me-2">Filter by Category:</label>
            <select name="categoryFilter" id="categoryFilter" class="form-control">
                <option value="">All Categories</option>
                @foreach (var category in Model.Select(t => t.Category).Distinct())
                {
                    <option value="@category" selected="@(ViewBag.CategoryFilter == category ? "selected" : null)">@category</option>
                }
            </select>
        </div>
        <button type="submit" class="btn btn-secondary">Filter</button>
    </form>
</div>

<!-- Tools Table -->
@if (Model.Any())
{
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Tool Name</th>
                <th>Category</th>
                <th>Premium</th>
                <th>Available</th>
                <th>Created At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tool in Model)
            {
                <tr>
                    <td>@tool.Name</td>
                    <td>@tool.Category</td>
                    <td>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="premium_@tool.Name"
                            @(tool.IsPremium ? "checked" : "") onchange="togglePremium('@tool.Name', this);" />
                            <label class="form-check-label" for="premium_@tool.Name">@(tool.IsPremium ? "ON" : "OFF")</label>
                        </div>
                    </td>
                    <td>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="available_@tool.Name"
                            @(tool.IsAvailable ? "checked" : "") onchange="toggleAvailability('@tool.Name', this);" />
                            <label class="form-check-label" for="available_@tool.Name">@(tool.IsAvailable ? "ON" : "OFF")</label>
                        </div>
                    </td>
                    <td>@tool.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>
                        <a asp-action="Detail" asp-route-toolName="@tool.Name" class="btn btn-info btn-sm">View</a>
                        <form asp-action="DeleteTool" method="post" style="display:inline;">
                            <input type="hidden" name="toolName" value="@tool.Name" />
                            <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete @tool.Name?')">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-3">
        <p>Showing @Model.Count tools.</p>
    </div>
}
else
{
    <p class="text-muted">No tools available.</p>
}

<!-- Styling -->
<style>
    .table th, .table td {
        vertical-align: middle;
    }

    .btn-sm {
        margin-right: 5px;
    }

    .form-inline .form-group {
        display: inline-block;
        margin-bottom: 0;
    }

    .form-switch .form-check-label {
        margin-left: 5px;
    }
</style>

<!-- JavaScript for AJAX -->
@section Scripts {
    <script>
        function togglePremium(toolName, element) {
            $.ajax({
                url: '@Url.Action("TogglePremium", "Tool")',
                type: 'POST',
                data: { toolName: toolName, isPremium: element.checked },
                success: function (response) {
                    if (response.success) {
                        // Update the label text without refreshing the page
                        $(element).next('label').text(element.checked ? 'ON' : 'OFF');
                    } else {
                        alert('Error: ' + response.message);
                        // Revert the checkbox state on error
                        element.checked = !element.checked;
                    }
                },
                error: function (xhr, status, error) {
                    alert('Error toggling premium status: ' + error);
                    // Revert the checkbox state on error
                    element.checked = !element.checked;
                }
            });
        }

        function toggleAvailability(toolName, element) {
            $.ajax({
                url: '@Url.Action("ToggleAvailability", "Tool")',
                type: 'POST',
                data: { toolName: toolName, isAvailable: element.checked },
                success: function (response) {
                    if (response.success) {
                        // Update the label text without refreshing the page
                        $(element).next('label').text(element.checked ? 'ON' : 'OFF');
                    } else {
                        alert('Error: ' + response.message);
                        // Revert the checkbox state on error
                        element.checked = !element.checked;
                    }
                },
                error: function (xhr, status, error) {
                    alert('Error toggling availability: ' + error);
                    // Revert the checkbox state on error
                    element.checked = !element.checked;
                }
            });
        }
    </script>
}