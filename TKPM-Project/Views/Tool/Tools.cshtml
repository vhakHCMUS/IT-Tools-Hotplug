@using TKPM_Project.Models.Tools
@model List<Tool>

@{
    ViewData["Title"] = "Tools";
}

<style>
    :root {
        --primary-pink: #ffb6c1;
        --secondary-pink: #f8c8dc;
        --accent-rose: #ff91a4;
        --background-light: #fff0f5;
        --text-dark: #6a0572;
        --border-soft: #ffdde1;
        --gold-gradient: linear-gradient(135deg, #ffd700, #ffec8b);
    }

    body {
        background-color: var(--background-light);
        color: var(--text-dark);
    }

    .card {
        background-color: #ffffff;
        border: 2px solid var(--border-soft);
        border-radius: 16px;
        box-shadow: 2px 4px 10px rgba(255, 182, 193, 0.2);
        transition: transform 0.2s;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(255, 182, 193, 0.3);
        }

    .premium-card {
        background: var(--gold-gradient) !important;
        color: #8b6508 !important;
        border: 3px solid #ffcc00;
        animation: glow 1.5s infinite alternate;
    }

    @@keyframes glow {
        0% {
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        100% {
            box-shadow: 0 0 20px rgba(255, 215, 0, 1);
        }
    }

    .bi-heart {
        cursor: pointer;
        font-size: 1.2rem;
    }

        .bi-heart.liked {
            color: #ff4d4f !important;
        }

        .bi-heart:not(.liked) {
            color: black !important;
        }

        .bi-heart:hover {
            color: #ff4d4f !important;
        }
</style>

<div class="text-center">
    <div class="mb-4">
        <form id="searchForm" class="d-flex justify-content-center gap-3">
            <input type="text" class="form-control w-25" id="searchName" placeholder="Search by name...">
            <select class="form-select w-25" id="searchCategory">
                <option value="">All Categories</option>
                <option value="API Testing">API Testing</option>
                <option value="Data Formatter">Data Formatter</option>
                <option value="DateTime">DateTime</option>
                <option value="Encryption">Encryption</option>
                <option value="Math">Math</option>
                <option value="Productivity">Productivity</option>
                <option value="Programming">Programming</option>
                <option value="Text Processing">Text Processing</option>
                <option value="Utilities">Utilities</option>
                <option value="Git helper">Git helper</option>
            </select>
            <select class="form-select w-25" id="searchPremium">
                <option value="">All</option>
                <option value="true">Premium Only</option>
                <option value="false">Free Only</option>
            </select>
            <select class="form-select w-25" id="sortBy">
                <option value="name_asc">Name (A-Z)</option>
                <option value="name_desc">Name (Z-A)</option>
                <option value="date_asc">Date (Oldest)</option>
                <option value="date_desc">Date (Newest)</option>
            </select>
            <button type="submit" class="btn btn-primary">Search</button>
        </form>
    </div>

    <div id="toolsContainer">
        @if (Model != null && Model.Any())
        {
            <div class="row row-cols-1 row-cols-md-3 g-4" id="toolsList">
                @foreach (var tool in Model)
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm @(tool.IsPremium ? "premium-card" : "")">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0">@tool.Name</h5>
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <i class="bi bi-heart" data-tool-id="@tool.Id" onclick="toggleLike(@tool.Id, this)"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-heart"></i>
                                    }
                                </div>
                                <p class="card-text text-muted small mt-2">@tool.Description</p>
                                <p class="card-text text-muted small">
                                    <strong>Category:</strong> @tool.Category<br />
                                    <strong>Premium:</strong> @(tool.IsPremium ? "Yes" : "No")
                                </p>
                                <div class="d-flex justify-content-between">
                                    <a asp-controller="Tool" asp-action="Detail" asp-route-toolName="@tool.Name" class="btn btn-primary btn-sm">View Details</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No tools available yet.</p>
        }
    </div>
</div>

@* Move shared script outside of the authenticated user check *@
<script>
    document.getElementById('searchForm').addEventListener('submit', function(e) {
        e.preventDefault();
        searchTools();
    });

    document.getElementById('searchName').addEventListener('input', debounce(searchTools, 300));
    document.getElementById('searchCategory').addEventListener('change', searchTools);
    document.getElementById('searchPremium').addEventListener('change', searchTools);
    document.getElementById('sortBy').addEventListener('change', searchTools);

    async function searchTools() {
        const searchName = document.getElementById('searchName').value;
        const searchCategory = document.getElementById('searchCategory').value;
        const searchPremium = document.getElementById('searchPremium').value;
        const sortBy = document.getElementById('sortBy').value;

        try {
            const response = await fetch('/Tool/SearchTools?' + new URLSearchParams({
                name: searchName,
                category: searchCategory,
                premium: searchPremium,
                sortBy: sortBy
            }), {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Search request failed: ${response.status} - ${errorText}`);
            }

            const tools = await response.json();
            updateToolsDisplay(tools);
        } catch (error) {
            console.error('Error searching tools:', error);
            document.getElementById('toolsContainer').innerHTML =
                `<p class="text-danger">Error loading tools: ${error.message}. Please try again.</p>`;
        }
    }

    function updateToolsDisplay(tools) {
        const toolsContainer = document.getElementById('toolsContainer');
        if (!toolsContainer) return;

        if (tools.length === 0) {
            toolsContainer.innerHTML = '<p>No tools found matching your criteria.</p>';
            return;
        }

        let html = '<div class="row row-cols-1 row-cols-md-3 g-4" id="toolsList">';
        tools.forEach(tool => {
            const premiumClass = tool.isPremium ? 'premium-card' : '';
            let heartIcon = '';
            
            if (@User.Identity.IsAuthenticated.ToString().ToLower()) {
                heartIcon = `<i class="bi bi-heart" data-tool-id="${tool.id}" onclick="toggleLike(${tool.id}, this)"></i>`;
            } else {
                heartIcon = `<i class="bi bi-heart"></i>`;
            }
            
            html += `
                <div class="col">
                    <div class="card h-100 shadow-sm ${premiumClass}">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0">${tool.name}</h5>
                                ${heartIcon}
                            </div>
                            <p class="card-text text-muted small mt-2">${tool.description || ''}</p>
                            <p class="card-text text-muted small">
                                <strong>Category:</strong> ${tool.category || 'N/A'}<br />
                                <strong>Premium:</strong> ${tool.isPremium ? 'Yes' : 'No'}
                            </p>
                            <div class="d-flex justify-content-between">
                                <a href="/Tool/Detail?toolName=${tool.name}"
                                   class="btn btn-primary btn-sm">View Details</a>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
        html += '</div>';
        toolsContainer.innerHTML = html;

        if (@User.Identity.IsAuthenticated.ToString().ToLower()) {
            const hearts = document.querySelectorAll('.bi-heart');
            hearts.forEach(heart => {
                const toolId = heart.getAttribute('data-tool-id');
                checkLikeStatus(toolId, heart);
            });
        }
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
</script>

@if (User.Identity.IsAuthenticated)
{
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const hearts = document.querySelectorAll('.bi-heart');
            for (let heart of hearts) {
                const toolId = heart.getAttribute('data-tool-id');
                await checkLikeStatus(toolId, heart);
            }
        });

        async function checkLikeStatus(toolId, heartElement) {
            try {
                const response = await fetch(`/api/userlikedtools/isliked?toolId=${toolId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await response.json();
                if (response.ok && data.isLiked) {
                    heartElement.classList.add('liked');
                } else {
                    heartElement.classList.remove('liked');
                }
            } catch (error) {
                console.error('Error checking like status:', error);
            }
        }

        async function toggleLike(toolId, heartElement) {
            const isLiked = heartElement.classList.contains('liked');
            const url = isLiked ? `/api/userlikedtools/unlike?toolId=${toolId}` : `/api/userlikedtools/like?toolId=${toolId}`;
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (response.ok) {
                    heartElement.classList.toggle('liked');
                    const message = await response.text();
                    alert(message);
                } else {
                    const error = await response.text();
                    alert(error);
                }
            } catch (error) {
                console.error('Error toggling like:', error);
                alert('An error occurred while toggling like.');
            }
        }
    </script>
}