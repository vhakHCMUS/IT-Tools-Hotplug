@model TKPM_Project.Models.ResetPasswordModel

@{
    ViewData["Title"] = "Reset Password";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm animate__animated animate__fadeIn">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <h2 class="display-6 fw-bold text-gradient">Reset Password</h2>
                        <p class="text-muted">Enter your new password</p>
                    </div>

                    <div id="notification-container" class="mb-4" style="display: none;"></div>

                    <form id="resetPasswordForm">
                        <input type="hidden" id="Username" value="@Model.Username" />
                        <input type="hidden" id="Token" value="@Model.Token" />

                        <div class="form-floating mb-4">
                            <input type="password" class="form-control custom-input" id="NewPassword" placeholder="New Password" required minlength="6" />
                            <label for="NewPassword"><i class="bi bi-shield-lock me-2"></i>New Password</label>
                        </div>

                        <div class="form-floating mb-4">
                            <input type="password" class="form-control custom-input" id="ConfirmPassword" placeholder="Confirm Password" required minlength="6" />
                            <label for="ConfirmPassword"><i class="bi bi-shield-check me-2"></i>Confirm Password</label>
                        </div>

                        <button type="button" class="btn btn-primary btn-lg w-100 custom-button" onclick="submitResetPassword()">
                            <i class="bi bi-arrow-repeat me-2"></i>Reset Password
                        </button>
                    </form>

                    <div class="text-center mt-4">
                        <p>Go back to <a href="/Account/Login" class="text-decoration-none fw-bold">Sign In</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function submitResetPassword() {
            const username = document.getElementById("Username").value;
            const token = document.getElementById("Token").value;
            const newPassword = document.getElementById("NewPassword").value;
            const confirmPassword = document.getElementById("ConfirmPassword").value;

            console.log("Reset password attempt:");
            console.log("Username:", username);
            console.log("Token length:", token?.length);
            console.log("NewPassword length:", newPassword?.length);

            if (!newPassword || !confirmPassword) {
                showNotification("Please enter all fields", 'error');
                return;
            }

            if (newPassword !== confirmPassword) {
                showNotification("Passwords do not match", 'error');
                return;
            }

            if (newPassword.length < 6) {
                showNotification("Password must be at least 6 characters long", 'error');
                return;
            }

            try {
                const requestBody = { 
                    username: username,
                    token: token,
                    newPassword: newPassword
                };
                console.log("Sending request with body:", requestBody);

                const response = await fetch('/api/auth/reset-password', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestBody)
                });

                const data = await response.json();
                console.log("Server response:", data);

                if (response.ok) {
                    showNotification(data.message || "Password reset successfully", 'success');
                    setTimeout(() => {
                        window.location.href = "/Account/Login";
                    }, 2000);
                } else {
                    let errorMessage = data.message || "An error occurred";
                    if (data.errors) {
                        errorMessage += "\n" + Object.values(data.errors)
                            .flat()
                            .join("\n");
                    }
                    showNotification(errorMessage, 'error');
                }
            } catch (error) {
                console.error('Error details:', error);
                showNotification("An unexpected error occurred", 'error');
            }
        }

        function showNotification(message, type) {
            const container = document.getElementById('notification-container');
            container.style.display = 'block';

            const icon = type === 'success'
                ? '<i class="bi bi-check-circle-fill"></i>'
                : '<i class="bi bi-exclamation-circle-fill"></i>';

            const formattedMessage = message.split('\n').join('<br>');

            container.innerHTML = `
                <div class="notification notification-${type}">
                    ${icon}
                    <span>${formattedMessage}</span>
                </div>
            `;

            if (type === 'success') {
                setTimeout(() => {
                    container.style.display = 'none';
                }, 5000);
            }
        }
    </script>
}
